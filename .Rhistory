library(plotly)
ggplot(AIS) + geom_point(aes(HGB, RBC))
ggplot(AIS) + geom_point(aes(HCT, HGB))
library(plotly)
plot_ly(x = AIS$HCT,
y = AIS$HGB,
z = AIS$RBC)
# Performing PCA
RedBlood_data <- AIS %>% select(HCT, HGB, RBC) %>% scale() # Scale the data first
RedBlood_data
PCA_RedBlood <- prcomp(RedBlood_data) # Perform PCA
PCA_RedBlood <- prcomp(RedBlood_data) # Perform PCA
AIS$RedBlood <- PCA_RedBlood$x[, 1] # Add the principal component into the data frame
# Visualising the principal component
ggplot(AIS) + geom_point(aes(HCT, RedBlood))
ggplot(AIS) + geom_point(aes(HGB, RedBlood))
ggplot(AIS) + geom_point(aes(RBC, RedBlood))
# Importance of each PC
summary(PCA_RedBlood)
plot(PCA_RedBlood)
# Selecting only numeric variables and rescaling
library(reshape)
AIS_x <- AIS %>% select(!c(Sex, Sport, HGB, RBC, HCT)) %>%
rescaler(type = "range")
# Running the K-means Algorithm
set.seed(123) # Setting random seed number
AIS_cnt <- AIS_x %>% sample_n(5) # Randomly selecting 5 points to start as our initial centroids
AIS_km1 <- kmeans(AIS_x, AIS_cnt) # Running the K-means algorithm
# Visualising the clusters
AIS_pca <- prcomp(AIS_x) # Performing PCA
AIS_pca_cluster <- data.frame(
Component1 = AIS_pca$x[, 1],
Component2 = AIS_pca$x[, 2],
Cluster1 = factor(AIS_km1$cluster)
) #Add first two principal components and cluster values to a data frame
AIS_pca_cluster %>%
ggplot(aes(Component1, Component2, col = Cluster1)) +
geom_point(size = 2)
set.seed(456) # Setting random seed number to a different value
AIS_cnt <- AIS_x %>% sample_n(5)  #Randomly selecting 5 points to start as our initial centroids
AIS_km2 <- kmeans(AIS_x, AIS_cnt)  # Running the K-means algorithm again
# Visualising the new cluster
AIS_pca_cluster$Cluster2 <- factor(AIS_km2$cluster) # Adding the new cluster value
AIS_pca_cluster %>%
ggplot(aes(Component1, Component2, col = Cluster2)) +
geom_point(size = 2)
# Performing multiple runs of the algorithm
library(fpc)
AIS_km <- kmeansruns(AIS_x, krange = 5, runs = 100)
# Visualising the cluster
AIS_pca_cluster$Cluster <- factor(AIS_km$cluster)
AIS_pca_cluster %>%
ggplot(aes(Component1, Component2, col = Cluster)) +
geom_point(size = 2)
# Visualising the cluster with clusplot
library(cluster)
clusplot(AIS_x, AIS_km$cluster)
# Visualising the cluster with the T-SNE plot
library(Rtsne)
AIS_tsne <- Rtsne(AIS_x)
AIS_tsne_df <- data.frame(AIS_tsne$Y, cluster = factor(AIS_km$cluster))
AIS_tsne_df %>% ggplot(aes(X1, X2, col = cluster)) + geom_point(size = 2)
# Checking the total within sum of squares for different Ks
AIS_km_wss <- c()
for (k in 1:20) {
AIS_km_temp <- kmeansruns(AIS_x, krange = k + 1, runs = 100) # 2-21 Clusters checked
AIS_km_wss[k] <- AIS_km_temp$tot.withinss # The total within sum of squares returned
}
AIS_km_SS <- data.frame(
K = 2:21, # K Value
WSS = c(AIS_km_wss), # Total within sum of squares
DWSS = c(NA, -diff(AIS_km_wss)) # Difference in within sum of squares from previous K
)
# Visualising the total within sum of squares across different Ks
AIS_km_SS %>% ggplot() +
geom_line(aes(K, WSS), size = 1.5) +
geom_line(aes(K, DWSS), linetype = 2, size = 1.5)
AIS$cluster <- factor(AIS_km$cluster)
# Visualising the clusters in terms of variables in the data
library(ggalt)
AIS %>%
ggplot(aes(
x = PBF,
y = Ht,
col = cluster,
fill = cluster
)) +
geom_point(aes(shape = Sex), size = 3) +
geom_encircle(alpha = 0.2) +
labs(x = "Percentage Body Fat",
y = "Height")
AIS %>%
ggplot(aes(
x = RedBlood,
y = Ferr,
col = cluster,
fill = cluster
)) +
geom_point(aes(shape = Sex), size = 3) +
geom_encircle(alpha = 0.2) +
labs(x = "Red Blood Cell Data Principal Component",
y = "Ferritin Levels")
AIS %>%
ggplot(aes(
x = Wt,
y = SSF,
col = cluster,
fill = cluster
)) +
geom_point(aes(shape = Sex), size = 3) +
geom_encircle(alpha = 0.2) +
labs(x = "Weight",
y = "Sum of Skin Folds")
# Obtaining summary statistics of our clusters
library(knitr)
AIS %>% group_by(cluster) %>% summarise(
Ht = mean(Ht),
Wt = mean(Wt),
PBF = mean(PBF),
SSF = mean(SSF),
Ferr = mean(Ferr),
RB = mean(RedBlood),
Males = sum(Sex == "M"),
Females = sum(Sex == "F")
) %>% kable(digits = 2, caption = "Cluster Averages")
# Add qualitative labels to our clusters
levels(AIS$cluster) <- c("Ht+ Power (M)",
"Ferr+ Power (M)",
"Lean Endurance (M)",
"Power (F)",
"Lean Endurance (F)")
# Regenerate our summary statistics and plots with the qualitative labels
AIS %>% group_by(cluster) %>% summarise(
Ht = mean(Ht),
Wt = mean(Wt),
PBF = mean(PBF),
SSF = mean(SSF),
Ferr = mean(Ferr),
RB = mean(RedBlood),
Males = sum(Sex == "M"),
Females = sum(Sex == "F")
) %>% kable(digits = 2, caption = "Cluster Averages")
AIS %>%
ggplot(aes(
x = PBF,
y = Ht,
col = cluster,
fill = cluster
)) +
geom_point(aes(shape = Sex), size = 3) +
geom_encircle(alpha = 0.2) +
labs(x = "Percentage Body Fat",
y = "Height")
AIS %>%
ggplot(aes(
x = RedBlood,
y = Ferr,
col = cluster,
fill = cluster
)) +
geom_point(aes(shape = Sex), size = 3) +
geom_encircle(alpha = 0.2) +
labs(x = "Red Blood Cell Data Principal Component",
y = "Ferritin Levels")
AIS %>%
ggplot(aes(
x = Wt,
y = SSF,
col = cluster,
fill = cluster
)) +
geom_point(aes(shape = Sex), size = 3) +
geom_encircle(alpha = 0.2) +
labs(x = "Weight",
y = "Sum of Skin Folds")
AIS %>% filter(Sex == "M") %>%
group_by(cluster, Sport) %>% count() %>%
pivot_wider(names_from = cluster,
values_from = n,
values_fill = 0) %>%
kable(caption = "Male Athletes")
AIS %>% filter(Sex == "F") %>%
group_by(cluster, Sport) %>% count() %>%
pivot_wider(names_from = cluster,
values_from = n,
values_fill = 0) %>%
kable(caption = "Female Athletes")
# Determine the hierarchical clusters using complete linkage and Euclidean distance.
AIS_hcl <- hclust(dist(AIS_x), method = "complete")
library(ggplot2)
install.packages("ggplot2")
install.packages("tidyverse")
remove.packages("ProntoPCR")
library(devtools)
remove.packages("devtools")
install.package("devtools")
install.packages("devtools")
remove.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("MarnieMaddock/ProntoPCR")
library(ProntoPCR)
ProntoPCR()
detach("package:devtools", unload = TRUE)
remove.packages("devtools")
detach("package:ProntoPCR", unload = TRUE)
remove.packages("ProntoPCR")
setwd("~/")
counts <- read.csv("salmon.merged.gene_counts.csv")
metadata <- read.csv("metadata.csv")
metadata <- read.csv("metadata.csv")
metadata
metadata <- read.csv("metadata.csv")
counts$gene_id
rownames(counts)<-counts$gene_id
#Remove any columns that arent counts
counts <- subset(counts, select=-c(gene_id,gene_name))
#Import metadata
#metadata <- read.csv("metadata.csv")
rownames(metadata)<-metadata$sample_id
#check that ID order is the same in both
all.equal(colnames(counts),rownames(metadata))
counts <- round(counts)
dds <- DESeqDataSetFromMatrix(countData = counts,colData=metadata, design=~1)
"s"
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("DESeq2")
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("GenomeInfoDb")
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("GenomeInfoDb")
BiocManager::install("GenomeInfoDb", force = TRUE)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts,colData=metadata, design=~1)
#DESEq2 workflow graphs online to visulise this
vsd<-vst(dds,blind=TRUE)
plotPCA(vsd,intgroup="sample_id")
#Customise graph as such
PCA <- plotPCA(vsd,intgroup="type", returnData=TRUE)
PCA
metadata
ggplot(data=PCA, aes(x=PC1, y=PC2, colour=type, shape=disease), show.legend = TRUE) +
geom_point(size=3.5) +
xlab("PC1: 97% variance") + ylab("PC2: 2% variance") +
theme_classic() +
scale_shape_manual(values=c(15, 16, 17, 18)) +
scale_colour_manual(values=c("pink", "purple", "lightskyblue", "orange"))
library(ggplot2)
ggplot(data=PCA, aes(x=PC1, y=PC2, colour=type, shape=disease), show.legend = TRUE) +
geom_point(size=3.5) +
xlab("PC1: 97% variance") + ylab("PC2: 2% variance") +
theme_classic() +
scale_shape_manual(values=c(15, 16, 17, 18)) +
scale_colour_manual(values=c("pink", "purple", "lightskyblue", "orange"))
ggplot(data=PCA, aes(x=PC1, y=PC2, colour=type), show.legend = TRUE) +
geom_point(size=3.5) +
xlab("PC1: 97% variance") + ylab("PC2: 2% variance") +
theme_classic() +
scale_shape_manual(values=c(15, 16, 17, 18)) +
scale_colour_manual(values=c("pink", "purple", "lightskyblue", "orange"))
PCA
# removing leaky expression genes
# removal of low low count reads (optional step)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds
metadata
counts
library(dplyr)
counts %>% select(matches("NCC"))
# Assuming your dataframe is named counts
counts_NCC <- counts %>% select(matches("NCC"))
counts_NIL <- counts %>% select(matches("NIL"))
counts_N <- counts %>% select(matches("N(?!IL|CC)", perl = TRUE))  # Exclude NIL and NCC while keeping N
metadata
# Assuming your metadata dataframe is named 'metadata'
metadata_NCC <- metadata %>% filter(grepl("NCC", sample_id))
metadata_NIL <- metadata %>% filter(grepl("NIL", sample_id))
metadata_N <- metadata %>% filter(grepl("N(?!IL|CC)", sample_id, perl = TRUE))  # Exclude NIL and NCC while keeping N
metadata_NCC
counts_SN <- DESeqDataSetFromMatrix(countData = counts_N,colData=metadata_N, design=~1)
dds_SN <- DESeqDataSetFromMatrix(countData = counts_N,colData=metadata_N, design=~1)
dds_LMN <- DESeqDataSetFromMatrix(countData = counts_NIL,colData=metadata_NIL, design=~1)
dds_NCC <- DESeqDataSetFromMatrix(countData = counts_NCC,colData=metadata_NCC, design=~1)
dds_SN <- dds_SN[keep,]
dds_LMN <- dds_LMN[keep,]
dds_NCC <- dds_NCC[keep,]
metadata_N
dds_SN$disease <- relevel(dds_SN$disease, ref = "cFA")
dds_SN <- dds_SN[keep,]
counts_N
keep <- rowSums(counts(dds_SN)) >= 10
dds_SN <- dds_SN[keep,]
keep <- rowSums(counts(dds_LMN)) >= 10
dds_LMN <- dds_LMN[keep,]
keep <- rowSums(counts(dds_NCC)) >= 10
dds_NCC <- dds_NCC[keep,]
dds_SN$disease <- relevel(dds_SN$disease, ref = "cFA")
metadata$disease <- as.factor(metadata$disease)
str(metadata)
# Assuming your metadata dataframe is named 'metadata'
metadata_NCC <- metadata %>% filter(grepl("NCC", sample_id))
metadata_NIL <- metadata %>% filter(grepl("NIL", sample_id))
metadata_N <- metadata %>% filter(grepl("N(?!IL|CC)", sample_id, perl = TRUE))  # Exclude NIL and NCC while keeping N
dds_SN <- DESeqDataSetFromMatrix(countData = counts_N,colData=metadata_N, design=~1)
dds_LMN <- DESeqDataSetFromMatrix(countData = counts_NIL,colData=metadata_NIL, design=~1)
dds_LMN <- DESeqDataSetFromMatrix(countData = counts_NIL,colData=metadata_NIL, design=~1)
dds_NCC <- DESeqDataSetFromMatrix(countData = counts_NCC,colData=metadata_NCC, design=~1)
keep <- rowSums(counts(dds_SN)) >= 10
dds_SN <- dds_SN[keep,]
keep <- rowSums(counts(dds_LMN)) >= 10
dds_LMN <- dds_LMN[keep,]
keep <- rowSums(counts(dds_NCC)) >= 10
dds_NCC <- dds_NCC[keep,]
dds_SN$disease <- relevel(dds_SN$disease, ref = "cFA")
dds_SN$disease <- relevel(dds_SN$disease, ref = "cFA")
dds_LMN$disease <- relevel(dds_LMN$disease, ref = "cFA")
dds_NCC$disease <- relevel(dds_NCC$disease, ref = "cFA")
deg_SN <- DESeq(dds_SN)
deg_NCC <- DESeq(dds_NCC)
deg_LMN <- DESeq(dds_LMN)
deg_SN
res_SN <- results(deg_SN)
res_LMN <- results(deg_LMN)
res_NCC <- results(deg_NCC)
res_SN
summary(res_SN)
summary(res_LMN)
summary(res_NCC)
res_SN <- results(deg_SN, alpha = 0.05)
res_LMN <- results(deg_LMN, alpha = 0.05)
res_NCC <- results(deg_NCC, alpha = 0.05)
summary(res_SN)
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
res_SN_df <- as.data.frame(res_SN)
res_SN_df$Symbol <- mapIds(org.Hs.eg.db, rownames(res_SN_df), keytype = "ENSEMBL", column = "SYMBOL")
str(res_SN_df)
res_SN_df
res_SN_df %>%
arrange(padj) %>%
head(30)
all(rownames(metadata) == colnames(counts))
dds_SN <- DESeqDataSetFromMatrix(countData = counts_N,colData=metadata_N, design=~disease)
dds_LMN <- DESeqDataSetFromMatrix(countData = counts_NIL,colData=metadata_NIL, design=~disease)
dds_NCC <- DESeqDataSetFromMatrix(countData = counts_NCC,colData=metadata_NCC, design=~disease)
keep <- rowSums(counts(dds_SN)) >= 10
dds_SN <- dds_SN[keep,]
keep <- rowSums(counts(dds_LMN)) >= 10
dds_LMN <- dds_LMN[keep,]
keep <- rowSums(counts(dds_NCC)) >= 10
dds_NCC <- dds_NCC[keep,]
dds_SN$disease <- relevel(dds_SN$disease, ref = "cFA")
dds_LMN$disease <- relevel(dds_LMN$disease, ref = "cFA")
dds_NCC$disease <- relevel(dds_NCC$disease, ref = "cFA")
deg_SN <- DESeq(dds_SN)
deg_LMN <- DESeq(dds_LMN)
deg_NCC <- DESeq(dds_NCC)
res_SN <- results(deg_SN, alpha = 0.05)
res_LMN <- results(deg_LMN, alpha = 0.05)
res_NCC <- results(deg_NCC, alpha = 0.05)
summary(res_SN)
summary(res_LMN)
summary(res_NCC)
res_SN_df <- as.data.frame(res_SN)
res_SN_df$Symbol <- mapIds(org.Hs.eg.db, rownames(res_SN_df), keytype = "ENSEMBL", column = "SYMBOL")
str(res_SN_df)
res_SN_df
res_SN_df %>%
arrange(padj) %>%
head(30)
res_SN_df %>%
#arrange(padj) %>%
filter(padj < 0.05) %>%  # Filter for significant genes (adjusted p-value)
arrange(desc(abs(log2FoldChange)))  # Sort by absolute log2FC in des
res_LMN_df <- as.data.frame(res_LMN)
res_NCC_df <- as.data.frame(res_NCC)
res_LMN_df$Symbol <- mapIds(org.Hs.eg.db, rownames(res_LMN_df), keytype = "ENSEMBL", column = "SYMBOL")
res_NCC_df$Symbol <- mapIds(org.Hs.eg.db, rownames(res_NCC_df), keytype = "ENSEMBL", column = "SYMBOL")
res_LMN_df %>%
#arrange(padj) %>%
filter(padj < 0.05) %>%  # Filter for significant genes (adjusted p-value)
arrange(desc(abs(log2FoldChange)))  # Sort by absolute log2FC in des
res_NCC_df %>%
#arrange(padj) %>%
filter(padj < 0.05) %>%  # Filter for significant genes (adjusted p-value)
arrange(desc(abs(log2FoldChange)))  # Sort by absolute log2FC in des
# Function to extract significant upregulated and downregulated genes
get_significant_genes <- function(res) {
res_df <- as.data.frame(res) %>%
filter(padj < 0.05)  # Adjusted p-value < 0.05
upregulated <- rownames(res_df[res_df$log2FoldChange > 0, ])  # Upregulated genes
downregulated <- rownames(res_df[res_df$log2FoldChange < 0, ])  # Downregulated genes
list(up = upregulated, down = downregulated)
}
# Function to extract significant upregulated and downregulated genes
get_significant_genes <- function(res) {
res_df <- res %>%
filter(padj < 0.05)  # Adjusted p-value < 0.05
upregulated <- rownames(res_df[res_df$log2FoldChange > 0, ])  # Upregulated genes
downregulated <- rownames(res_df[res_df$log2FoldChange < 0, ])  # Downregulated genes
list(up = upregulated, down = downregulated)
}
# Get up/down genes for each dataset
genes_SN <- get_significant_genes(res_SN_df)
genes_LMN <- get_significant_genes(res_LMN_df)
genes_NCC <- get_significant_genes(res_NCC_df)
genes_SN
# Find shared genes
shared_up <- Reduce(intersect, list(genes_SN$up, genes_LMN$up, genes_NCC$up))
shared_down <- Reduce(intersect, list(genes_SN$down, genes_LMN$down, genes_NCC$down))
# Print counts
cat("Shared Upregulated Genes:", length(shared_up), "\n")
cat("Shared Downregulated Genes:", length(shared_down), "\n")
# Create a Venn diagram for upregulated genes
venn.diagram(
x = list(SN = genes_SN$up, LMN = genes_LMN$up, NCC = genes_NCC$up),
category.names = c("SN", "LMN", "NCC"),
filename = "venn_upregulated.png",
output = TRUE
)
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
# Create a Venn diagram for upregulated genes
venn.diagram(
x = list(SN = genes_SN$up, LMN = genes_LMN$up, NCC = genes_NCC$up),
category.names = c("SN", "LMN", "NCC"),
filename = "venn_upregulated.png",
output = TRUE
)
# Create a Venn diagram for downregulated genes
venn.diagram(
x = list(SN = genes_SN$down, LMN = genes_LMN$down, NCC = genes_NCC$down),
category.names = c("SN", "LMN", "NCC"),
filename = "venn_downregulated.png",
output = TRUE
)
library(grid)
# Generate the Venn diagram
venn_up <- venn.diagram(
x = list(SN = genes_SN$up, LMN = genes_LMN$up, NCC = genes_NCC$up),
category.names = c("SN", "LMN", "NCC"),
filename = NULL,  # Prevent saving to a file
output = FALSE  # Return as an object instead
)
# Draw the Venn diagram in RStudio
grid.draw(venn_up)
# Do the same for downregulated genes
venn_down <- venn.diagram(
x = list(SN = genes_SN$down, LMN = genes_LMN$down, NCC = genes_NCC$down),
category.names = c("SN", "LMN", "NCC"),
filename = NULL,
output = FALSE
)
grid.draw(venn_down)
# Open the saved Venn diagram in RStudio
utils::browseURL("venn_downregulated.png")
utils::browseURL("venn_upregulated.png")
# Open the saved Venn diagram in RStudio
utils::browseURL("venn_downregulated.png")
utils::browseURL("venn_upregulated.png")
shared_up
res_SN_df %>%
#arrange(padj) %>%
filter(padj < 0.05) %>%  # Filter for significant genes (adjusted p-value)
arrange(desc(abs(log2FoldChange)))  # Sort by absolute log2FC in des
res_LMN_df
res_LMN_df %>%
filter(Symbol == "FXN")
res_SN_df %>%
filter(Symbol == "FXN")
res_LMN_df %>%
filter(Symbol == "FXN")
res_NCC_df %>%
filter(Symbol = "NCC")
res_NCC_df %>%
filter(Symbol = "FXN")
res_NCC_df %>%
filter(Symbol == "FXN")
res_SN_df %>%
filter(Symbol == "MEG3")
res_LMN_df %>%
filter(Symbol == "MEG3")
res_LMN_df %>%
filter(Symbol == "MEG3")
res_NCC_df %>%
filter(Symbol == "MEG3")
counts(dds_LMN)["MEG3", ]
counts
counts_LMN["MEG3", ]
counts_NIL["MEG3", ]
counts_NIL
counts_NIL["ENSG00000214548", ]
summary(res_LMN)
counts_NIL["ENSG00000214548", ]
mean(counts_NIL["ENSG00000214548", ])
counts_NIL["ENSG00000214548", ]
mean(as.numeric(counts_NIL["ENSG00000214548", ]))
"ENSG00000214548" %in% rownames(res_LMN_df)
res_LMN_df %>% filter(Symbol == "MEG3") %>% select(baseMean, log2FoldChange, padj)
attr(results(dds_LMN), "filterThreshold")
attr(results(deg_LMN), "filterThreshold")
1 + 1
#| echo: false
2 * 2
getwd()
setwd("C:/Users/marni/University of Wollongong/UOW-RB00962-MitoMorph - General/ImageJ Macros/ImageJ Macro Tutorial")
