[
  {
    "objectID": "FIJI-macro-tutorial.html",
    "href": "FIJI-macro-tutorial.html",
    "title": "Writing Your First ImageJ Macro",
    "section": "",
    "text": "A macro is an automated input sequence that imitates keystrokes or mouse actions. Instead of clicking around manually, you can write a macro to:\n\nRepeat tasks on many images. How many times do you click split channels &gt; max projection over and over…\nStreamline analysis and saving of results\nAutomate/Semi-automate analysis\nBuild reproducible analysis pipelines\n\nIn FIJI, you write macros in a special scripting language called the ijm language. You do not need to know how to ‘code’ to generate a macro in FIJI. However, learning some basics of macro syntax and workflow can improve the capacity to modify, debug (errors happen all too often), and fully automate analysis routines.\n\n\n\n\n\n\nNote\n\n\n\nThe IJM language was actually the first coding language I learnt. It is a great language to learn for beginner coders or the experienced!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#what-is-a-macro",
    "href": "FIJI-macro-tutorial.html#what-is-a-macro",
    "title": "Writing Your First ImageJ Macro",
    "section": "",
    "text": "A macro is an automated input sequence that imitates keystrokes or mouse actions. Instead of clicking around manually, you can write a macro to:\n\nRepeat tasks on many images. How many times do you click split channels &gt; max projection over and over…\nStreamline analysis and saving of results\nAutomate/Semi-automate analysis\nBuild reproducible analysis pipelines\n\nIn FIJI, you write macros in a special scripting language called the ijm language. You do not need to know how to ‘code’ to generate a macro in FIJI. However, learning some basics of macro syntax and workflow can improve the capacity to modify, debug (errors happen all too often), and fully automate analysis routines.\n\n\n\n\n\n\nNote\n\n\n\nThe IJM language was actually the first coding language I learnt. It is a great language to learn for beginner coders or the experienced!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#tips-before-writing-your-first-macro",
    "href": "FIJI-macro-tutorial.html#tips-before-writing-your-first-macro",
    "title": "Writing Your First ImageJ Macro",
    "section": "✅ Tips Before Writing Your First Macro",
    "text": "✅ Tips Before Writing Your First Macro\n\nCoding is unforgiving. It needs to be a certain structure to work well.\n\n\nSpelling is critical (files and file would specify different variables).\nCapital Letters are important (Image1 is not the same as image1)\nUse comments to help you (and others) understand your code. Comments start a line with // and are in green. These are not executed in the code.\nEach line ends with ;\nImageJ is open source (free) and people will help you if you have a question\n\nStack Overflow\nImage.SC\n\n\nDon’t post your own data unless necessary (Use ImageJ sample images)\n    🔎 File &gt; Open Samples\n\n\n\n\n\n\nNote\n\n\n\nI clearly wrote this a few years ago… ChatGPT is also a great place to get help.\n\n\n\nUse the Macro Recorder to capture your actions as code.\n  🔎 Plugins &gt; Macros &gt; Record...\nTest code on one image first.\nSave the macro with the .ijm extension."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#lets-create-a-macro",
    "href": "FIJI-macro-tutorial.html#lets-create-a-macro",
    "title": "Writing Your First ImageJ Macro",
    "section": "✏️ Let’s Create a Macro",
    "text": "✏️ Let’s Create a Macro\nLet’s write a macro, a small one first. Go to this folder and download the sample images.\n\nOpen FIJI\nDrag and drop the sample Image “sample-image1” into FIJI\n🔎 Plugins &gt; Macros &gt; Record…\n\n\nA Record Window will pop-up\n\nThe record window is your best friend. It will record all the actions you take in FIJI and convert them into code. This is a great way to learn how to write macros, as you can see the code that corresponds to each action you take.\n\nClick on the opened image\n🔎 Image &gt; Stacks &gt; Z Project…\n\n\nrun(\"Z Project...\", \"projection=[Max Intensity]\");\n\n\n🔎 Image &gt; Colour &gt; Split Channels\n\n\nrun(\"Split Channels\");\n\n\nClick on Recorder Window. Click Create\n\n\n\n\n\n\n\nOpen a second Image (sample-image2)\nClick Run. So quick!\nSave the new macro. 🔎 File &gt; Save As… &gt; max-projection_split-channels.ijm\n\n✅ Done!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#lets-create-a-macro---a-bit-more",
    "href": "FIJI-macro-tutorial.html#lets-create-a-macro---a-bit-more",
    "title": "Writing Your First ImageJ Macro",
    "section": "✏️ Let’s Create a Macro - A Bit More…",
    "text": "✏️ Let’s Create a Macro - A Bit More…\nNow we are going to add a bit more complexity. Close all open widnows in FIJI, we need a fresh start.\n\nDrag and Drop Image “sample-image1” into FIJI\n🔎 Plugins &gt; Macros &gt; Record…\nSelect opened image by clicking on it. Then 🔎 Image &gt; Stacks &gt; Z Project… &gt; Max Intensity\n\n\nrun(\"Z Project...\", \"projection=[Max Intensity]\");\n\n\n🔎 Image &gt; Color &gt; Split Channels\n\n\nrun(\"Split Channels\");\n\n\nSelect Channel 3 (Red Channel)\n\n\nselectImage(\"C3-MAX_sample-image1.tif\");\n\n\n🔎 Process &gt; Filters &gt; Unsharp Mask… (Radius 1, Mask Weight 0.60)\n\n\nrun(\"Unsharp Mask...\", \"radius=1 mask=0.60\");\n\n\n🔎 Process &gt; Binary &gt; Make Binary\n\n\nsetOption(\"BlackBackground\", true);\nrun(\"Convert to Mask\");\n\n\n🔎 Analyze &gt; Analyze Particles… (select options display results, clear results, summarize, add to manager, exclude on edges)\n\n\nrun(\"Analyze Particles...\", \"  show=Overlay display exclude clear summarize add\");\n\n\nSelect Window “Results”. 🔎 File &gt; Save As &gt; Results… &gt; Name results file. This filepath will be different for you.\n\n\nsaveAs(\"Results\", \"C:/Users/marni/ImageJ Macros/ImageJ Macro Tutorial/sample-images/Results.csv\");\n\n\nSelect Window “Summary”. 🔎 File &gt; Save As &gt; Results… &gt; Name summary file. This filepath will be different for you.\n\n\nsaveAs(\"Results\", \"C:/Users/marni/ImageJ Macros/ImageJ Macro Tutorial/sample-images/Summary.csv\");\n\n\nGo to recorder, delete any accidental lines of code by highlighting them &gt; delete. Then press create.\n\n\n\n\n\n\n\nClose all windows except this macro. To close all open images we can do this quickly using one line of code in a new macro! 🔎 File &gt; New &gt; close(“*”); &gt; run.\nDelete Results and Summary files from your folder.\nDrag and drop the same image in (It works). You should see the saved csv files in the specified folder.\nClose all windows except the macro window.\nDrag and drop a new image in “sample-image2”. An error appears.\n\n\nNo Window with the title \"sample-image2\" found.\n\nThe macro is looking for our first image (sample-image1) not the second (sample-image2).\n💡 We need to make the code generic!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#making-a-macro-generic",
    "href": "FIJI-macro-tutorial.html#making-a-macro-generic",
    "title": "Writing Your First ImageJ Macro",
    "section": "🔥 Making a Macro Generic",
    "text": "🔥 Making a Macro Generic\nThis enables you to perform your macros, without having to specify the image name manually every time.\nA reminder:\n\nWhen writing code in the ImageJ language all lines must end with a semi-colon (;)\nCode is case sensitive (Image1 is different to image1).\n\nA lot of errors can be fixed by checking these two things.\nUsing the existing macro:\n\nOn the very first line add:\n\n\ntitle = getTitle();\n\ngetTitle() is a built-in function that returns the name of the currently active image.\ntitle is a variable — it holds the result of the function.\nThe = sign assigns the value. Think of ‘title’ like a labeled box that now holds the image’s name. You can reuse this value later in your macro, for example, when saving results using the image name. Anywhere we have our image name – we can change to title…\n💡 Tip: You can name your variables anything (like imgName, filename, etc.), but title is a good descriptive choice here since we’re storing the image title.\n\n\n\n\n\n\n\nRules for Naming Variables\n\n\n\n\n\n\n\n\n\n\n\nRule\nExample\nNotes\n\n\n\n\n1. Must start with a letter\ncellCount\n✅ OK\n\n\n2. Can contain letters, numbers, or underscores\nimage_01, threshold_level\n✅ OK\n\n\n3. Cannot contain spaces\n❌ cell count\nUse underscores or camelCase instead\n\n\n4. Cannot start with a number\n❌ 1stImage\n✅ firstImage\n\n\n5. Avoid symbols or punctuation\n❌ title!, my-variable.\n\n\n\n6. Case-sensitive\nTitle ≠ title\nTitle and title are different\n\n\n7. Avoid using built-in keywords or function names\n❌ run, print, getTitle\nThese are reserved by ImageJ\n\n\n\n\n\n\n\n\n\n\n\nTips for Good Variable names\n\n\n\n\n\n\n\n\n\n\nTip\nWhy It Helps\n\n\n\n\n✅ Use descriptive names\ne.g., nucleiCount, imageTitle\n\n\n✅ Use camelCase or snake_case for readability\ne.g., cellArea, cell_area\n\n\n✅ Be consistent across your macro\nMakes your code easier to read and maintain\n\n\n❌ Avoid names like x, y, a unless for quick loops\nNot informative\n\n\n\n\n\n\nNow we need to change the image name in the selectImage() line.\n\n\nselectImage(“C3-MAX_” + title);\n\nThe + sign is used to concatenate (join) strings (words in ” ” and variables) together. The string “C3-MAX_” is joined with the value of the variable title that we assigned at the start of the macro.\n\nOpen sample-Image1. Press Run. Check output files. The macro should run with no errors. Repeat for sample-Image2. Check output files.\n\nHowever…\nCurrently our results are being saved as “Results” and “Summary”, and these are being overwritten every time we run a new image. It is best to include the image name when saving the results, so that they are unique and do not get overwritten.\n\nWe can change:\n\n\nsaveAs(\"Results\", \"C:/Users/marni/ImageJ Macros/ImageJ Macro Tutorial/sample-images/Results.csv\");\n\nTo:\n\nselectWindow(\"Results\");\nsaveAs(\"Results\", \"C:/Users/marni/ImageJ Macros/ImageJ Macro Tutorial/sample-images/\" + \"Results_\" + title + \".csv\");\n\nHere we are selecting the Results Window, and saving it to the destination folder with the name Results_sample-image1.csv or Results_sample-image2.csv. The same can be done for the Summary file.\n\nChange the Summary file name to:\n\n\nselectWindow(\"Summary\");\nsaveAs(\"Results\", \"C:/Users/marni/ImageJ Macros/ImageJ Macro Tutorial/sample-images/\" + \"Summary_\" + title + \".csv\");\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nStrings are pieces of text. In ImageJ, strings are enclosed in double quotes (“). For example,”Hello World” is a string. You can concatenate strings using the + operator.\nVariables are like boxes that hold values. You can create a variable to store a string, number, or other data types. For example, myString = \"Hello\" creates a variable called myString that holds the string “Hello”.\nVariables do not need to be in quotes. Strings must be in quotes. A variable can be a string, but a string cannot be a variable. For example, myString = \"Hello\" is correct, but \"myString\" = \"Hello\" is incorrect.\n\n\n\nSave the macro. Close all windows except the macro window. Drag and drop sample-image1 and sample-image2 into FIJI. Check the output files.\n\n\n\n\n\n\n\n\n\n\n\n\nFix the Mistake\n\n\n\nCreate a macro that stores a name in a variable and prints it. What is wrong with the following code? What is the error message?\n\"name\" = \"Mitochondria\";\nprint(name);\n\n\n🔍 Show Answer and Explanation\n\nMacro Error:\nStatement cannot begin with ‘=’ in line 1.\n\"name\" = \"Mitochondria\";  // ❌ Invalid syntax\nname = \"Mitochondria\";  // ✅ Variable name is unquoted\nprint(name);  // ✅ Prints the value of the variable\nThis error occurs because the macro is trying to assign a value to a string literal (the quoted text “name”) instead of a variable. In ImageJ macros, variable names should not be enclosed in quotes.\n\nNow try this code:\nname = mitochondria\nprint(name)\nWhat error message do you expect?\n\n\n🔍 Show Answer and Explanation\n\nMacro Error: Undefined variable in line 1.\nThis error occurs because the macro is trying to assign a variable (mitochondria - note it is not in quotes) to a variable name (name). Because we haven’t defined the variable mitochondria, the macro doesn’t know what it is. In ImageJ macros, variable names should be defined before they are used. To fix this, we can either define the variable mitochondria or use a string literal (e.g., “mitochondria”) instead.\n\n\n\n\n\n\n\n\n\nFix the Mistake\n\n\n\nCreate a new macro with the following code:\ntitle = \"my image\"\nprint(title);\nWhat is wrong with the code? What is the error message?\n\n\n🔍 Show Answer and Explanation\n\nMacro Error: ‘;’ expected in line 1.\ntitle = \"my image\"  // ❌ Missing semicolon\ntitle = \"my image\";  // ✅ Corrected code\nprint(title);  // ✅ Prints the value of the variable\nThis error occurs because the macro is missing a semicolon at the end of the first line. In ImageJ macros, each statement must end with a semicolon.\n\n\n\n\n\n\n\n\n\nFix the Mistake\n\n\n\nCreate a new macro with the following code:\ndirectory = getDirectory(\"Choose Directory\";\nprint(directory);\nWhat is wrong with the code? What is the error message?\n\n\n🔍 Show Answer and Explanation\n\nMacro Error: `‘)’ expected in line 1.\ndirectory = getDirectory(\"Choose Directory\";  // ❌ Missing closing parenthesis\ndirectory = getDirectory(\"Choose Directory\");  // ✅ Corrected code\nprint(directory);  // ✅ Prints the value of the variable\nThis error occurs because the macro is missing a closing parenthesis at the end of the first line. In ImageJ macros, each function call must have matching parentheses.\n\n\n\n\n\n\n\n\n\nFix the Mistake\n\n\n\nCreate a new macro with the following code:\nthreshold = 128;\nthreshold = \"Low\";\nprint(threshold);\nWhat type of value does threshold hold?\n\n\n🔍 Show Answer and Explanation\n\nInitially, threshold holds a number (128)…\n…but then it is overwritten with a string “Low”.\nResult: the final print statement will output a string, not a number. This won’t crash the macro, but it can lead to unexpected behavior if you later try to use threshold as a number (e.g., in math operations).\n\n\n\n\n\n\n\n\n\nFix the Mistake\n\n\n\nTry this macro code:\nrun = \"Start\";\nprint(run);\nWill this code work? What colour will the text be?\n\n\n🔍 Show Answer and Explanation\n\nMacro Error: ‘(’ expected in line 1.\nrun is a built-in function name in ImageJ macros — using it as a variable name overwrites or shadows that function. You can tell its a function name because it is written in gold. Variables should be black. The macro is expecting the function run() and so is why the error message shows ‘(’ expected.\n❌ Don’t use built-in function names like:\n\nrun\nprint\ngetTitle\nshowMessage\n\n✅ Instead, choose a different name:\nrun_status = \"Start\";\nprint(run_status);\n\n\n\nGreat, I now have my files saved in this filepath. I can now run this macro on any image I want, and it will save the results in the same file path with the image name included. This is a great start to automating analysis. But, what if I want to use this macro and save the results in a different folder each time it is run?"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#saving-results-using-getdirectory",
    "href": "FIJI-macro-tutorial.html#saving-results-using-getdirectory",
    "title": "Writing Your First ImageJ Macro",
    "section": "📂 Saving Results using getDirectory()",
    "text": "📂 Saving Results using getDirectory()\nWe can use the built-in function getDirectory() to specify the folder we want to save our results in. This function allows us to select a directory using a file dialog box. This way, we do not need to write out the entire filepath each time we run the macro for different folders.\n\nUsing the existing macro, at the start add:\n\n\ndir = getDirectory(\"Choose Destination Directory\");\n\nThis will open a file dialog box that allows you to select the destination folder. The selected folder filepath will be stored in the variable dir.\n\nNow we need to change the saveAs() lines to:\n\n\nselectWindow(\"Results\");\nsaveAs(\"Results\", dir + \"Results_\" + title + \".csv\");\nselectWindow(\"Summary\");\nsaveAs(\"Results\", dir + \"Summary_\" + title + \".csv\");\n\nThis simplifies things a lot. Now, when you run the macro, it will prompt you to select a destination folder. The results will be saved in that folder with the image name included.\n\nSave the macro. Close all windows except the macro window. Drag and drop sample-image1 and sample-image2 into FIJI. Run the macro on both images. Try saving the results in a different folder to the one you originally specified to see if it works.\n\n\n\n\n\n\n\n\n\n\n\n\nTip: Saving Other Types of Results\n\n\n\nOften, you may want to save other types of results, such as images or text files. You can use the same method to specify the directory and filename. For example to save a processed image as a tiff file:\nsaveAs(\"Tiff\", dir + \"processed-image_\" + title + \".tif\");\nOr to save the regions of interest (ROIs) selected by analyze particles:\nroiManager(\"Save\", dir + title + \"_RoiSet.zip\");\n📌 Tip: Always ensure you run saveAs() after processing is complete, and that the correct image window is active.\n\n\nBut wait! What if I want to count objects in a different channel? I.e. for one experiment my object of interest was imaged in C2, and some in C3. I want to be able to specify which channel I want to count objects in, without having to change the code each time manually."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#making-the-macro-more-flexible",
    "href": "FIJI-macro-tutorial.html#making-the-macro-more-flexible",
    "title": "Writing Your First ImageJ Macro",
    "section": "🔄 Making the Macro More Flexible",
    "text": "🔄 Making the Macro More Flexible\nWe can use the built-in function getNumber() to prompt the user for input. This allows us to specify which channel we want to count objects in.\n\nUsing the existing macro, before the line title = getTitle(); add:\n\n\nDialog.create(\"Specify Channel Numbers\");\nDialog.addNumber(\"Channel number for analyze particles\", 1);\nDialog.show();\n\nchannel_num = Dialog.getNumber();\n\nThis will open a dialog box that prompts the user to enter a number. The entered number will be stored in the variable channel_num. This number will be used to specify which channel to analyze and count objects from.\nDialog.create() creates a new dialog box with the title “Specify Channel Numbers”. Dialog.addNumber() adds a number input field to the dialog box with the label “Channel number for analyze particles” and a default value of 1. Dialog.show() displays the dialog box to the user. channel_num = Dialog.getNumber() retrieves the number entered by the user in the dialog box.\n\n\n\n\n\n\nNow we need to change the selectImage() line from:\n\n\nselectImage(\"C3-MAX_\" + title);\n\nto:\n\nselectImage(\"C\" + channel_num + \"-MAX_\" + title);\n\nThis will select the channel specified by the user in the dialog box. The + sign concatenates the string “C” with the value of channel_num and the string “-MAX_” with the value of title.\n\nSave the macro. Close all windows except the macro window. Drag and drop sample-image1 into FIJI. Run the macro by choosing 1 as the channel number. Then run the macro again by choosing 2 when prompted. Check the output files.\n\n\n\n\n\n\n\nTip: Dialog Input Types and How to Save Their Values\n\n\n\nImageJ macros support a wide range of dialog inputs using Dialog.add...() functions.\nHere’s a summary of commonly used options and how to save their values:\n\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nSaving the Input\n\n\n\n\nDialog.addNumber()\nNumeric input field\nDialog.addNumber(\"Channel number\", 1)\nchannel_num = Dialog.getNumber();\n\n\nDialog.addString()\nText input field\nDialog.addString(\"Channel name\", \"Mitochondria\")\nchannel_name = Dialog.getString();\n\n\nDialog.addCheckbox()\nCheckbox (true/false)\nDialog.addCheckbox(\"Enhance Contrast\", true)\nenhance = Dialog.getCheckbox();\n\n\nDialog.addChoice()\nDropdown menu\nDialog.addChoice(\"Options\", newArray(\"opt1\", \"opt2\"), \"opt1\")\nselected_option = Dialog.getChoice();\n\n\nDialog.addHelp()\nHelp button with URL\nDialog.addHelp(\"https://...\")\n(No value to retrieve)\n\n\nDialog.addSlider()\nSlider input (min, max, default)\nDialog.addSlider(\"Particle Size\", 1, 1000, 312)\nparticle_size = Dialog.getSlider();\n\n\nDialog.addRadioButtonGroup()\nRadio button grid\nDialog.addRadioButtonGroup(\"Cities\", newArray(\"NY\", \"Paris\"), 2, 1, \"Paris\")\nselected_city = Dialog.getRadioButton();\n\n\n\n\nYou can mix and match these input types in a single dialog box to collect multiple parameters from the user.\n📌 Don’t forget to call Dialog.show(); before retrieving values!\nThese tools help create rich, interactive macro interfaces to guide the user through parameter selection. You can mix these in a single dialog box to collect different types of input from the user. Give it a try by adding these options to your macro, and see what they look like.\n\nDialog.create(\"Create a dialog box\");\nDialog.addNumber(\"Channel number for analyze particles\", 1);\nDialog.addString(\"Channel name\", \"Mitochondria\")\nDialog.addCheckbox(\"Enhance Contrast\", true);\nDialog.addChoice(\"Multiple Options\", newArray(\"option1\",\"option2\",\"option3\"), \"option1\");\nDialog.addHelp(\"https://github.com/MarnieMaddock?tab=repositories\");\nDialog.addSlider(\"Particle Size\", 1, 1000, 312);\n\nitems = newArray(\"New York\", \"London\", \"Paris\", \"Tokyo\");\nDialog.addRadioButtonGroup(\"Cities\", items, 2, 2, \"Paris\");\nDialog.show();\n\n\n\n\n\n\n\n\n\nChallenge: Customize the Dialog\n\n\n\nLet’s create a dialog box that allows the user to specify different options for the analyze particle function and extract the options selected by the user by assigning the options to variables. Then run analyze particles using the options selected by the user.\nThe user should be able to:\n\nSet the minimum size of particles to detect\nSet the minimum circularity of particles to detect\nSet the maximum size of particles to detect\n\nUse the dialog inputs to control how run(\"Analyze Particles...\") is executed. Look at your previous analyze particles function as a guide on the format. Remember to concatenate the strings and variables together using + to create the correct command.\n\n\n🔍 Show Solution\n\n// Create dialog box\nDialog.create(\"Analyze Particles Options\"); // Dialog box pop-up\nDialog.addNumber(\"Minimum Particle Size\", 0); // Default set to 0\nDialog.addNumber(\"Minimum circularity\", 0); // Default set to 0\nDialog.addNumber(\"Maximum circularity\", 1); // Default set to 1\nDialog.show(); // Show dialog box\n\n// Get user input by svaing the options to variables\nmin_size = Dialog.getNumber(); // Get minimum size\nmin_circularity = Dialog.getNumber(); // Get minimum circularity\nmax_circularity = Dialog.getNumber(); // Get maximum circularity\n\n// Build the options string using the numbers supplied\nap_options = \"size=\" + min_size + \"-Infinity circularity=\" + min_circularity + \"-\" + max_circularity + \" show=Overlay display exclude clear summarize overlay add\";\n\nrun(\"Analyze Particles...\", ap_options);\nTest this out yourself. Change the minimum size, minimum circularity, and maximum circularity to see how it changes the results."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#adding-comments",
    "href": "FIJI-macro-tutorial.html#adding-comments",
    "title": "Writing Your First ImageJ Macro",
    "section": "💬 Adding Comments",
    "text": "💬 Adding Comments\nNow that we have written a working macro, we need to add some comments so that others, and your future self can understand what your code is doing. Comments can be added by using // at the start of the line. These will not be read as excutable code. This is a good habit to get into when writing code, as it makes it easier to understand and debug later on.\nFirst start by adding comments to specify that this code is to be run in FIJI. I then add my name, date, and a title of the macro.\n\n// USAGE: Use in FIJI\n//\n// Author: Marnie L Maddock (University of Wollongong)\n// mmaddock@uow.edu.au, mlm715@uowmail.edu.au\n// 5.07.2024\n// Count number of Objects in a Channel\n\nLonger comments can be added by using /* and */ at the start and end of a large piece of text. This is useful for adding longer descriptions of what the macro does, or how to use it.\n\n/*\nThis macro will take an image and:\n1. Run a max projection,\n2. Split the channels,\n3. Unsharp mask, \n4. Convert to binary,\n5. Analyze particles (count objects),\n6. Save the results and summary files.\n*/\n\nNow we need to add comments to each section of the code. For example:"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#pausing-your-macro",
    "href": "FIJI-macro-tutorial.html#pausing-your-macro",
    "title": "Writing Your First ImageJ Macro",
    "section": "⏸️ Pausing Your Macro",
    "text": "⏸️ Pausing Your Macro\nWhen writing macros, sometimes you don’t want everything to run automatically. You might want to:\n\nPause and let the user inspect an image manually\nAllow manual ROI drawing before continuing\nAdd a checkpoint to confirm results before the next step\nGive instructions to the user\n\nThis is where waitForUser() comes in — it temporarily pauses the macro until the user clicks OK.\n✅ Basic use:\n\nwaitForUser(\"Click OK when ready to continue\");\n\nThis will pause the macro and show a dialog with the message “Click OK when ready to continue”. Write this in a new macro window and see what happens when you press run.\n✅ With a title and message:\n\nwaitForUser(\"Step 2\", \"Now draw an ROI on the image. Click OK when finished.\");\n\nThis will show a dialog with the title “Step 2” and the message “Now draw an ROI on the image. Click OK when finished.” The macro will pause until you click OK.\nCreate a new macro file and copy in the following:\n\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\n\n// Instruct user to draw a selection\nwaitForUser(\"Step 1\", \"Please draw an ROI (e.g. a rectangle) on the image and then click OK.\");\n\n// Continue with analysis\nrun(\"Measure\");\n\nThis macro will open the Blobs (25K) image, convert it to 8-bit, and then pause to let the user draw a selection. After clicking OK, it will measure the selected area.\n\n\n\n\n\n\nAnother way to add a pause is to use the showMessage() function. Use showMessage() when you want to:\n\nGive instructions or context before running a step\nConfirm parameters before analysis\nDisplay a simple summary to the user\nProvide educational or progress prompts\n\nUnlike waitForUser(), it’s often used just to notify, not necessarily pause deeply for user interaction.\n✅ Simple message\n\nshowMessage(\"This macro will convert your image to binary.\");\n\nTry this out yourself:\n\nshowMessage(\"Step 1\", \"This step will threshold your image.\\nPlease ensure it's 8-bit grayscale.\");\n\nFirst argument is the title, second is the message. You can use slash n for line breaks.\n\nThere is one more way to pause a macro. We can use the wait() function to automtically pause the macro for a specified amount of time.\nUse wait() when you want to:\n\nPause briefly between steps for visual effect\nGive the user a moment to see changes before moving on\nAllow your computer to complete processing before moving on (important when svaing large images or files)\n\nUnlike waitForUser() or showMessage(), wait() does not require the user to click OK — it just pauses for a set time in milliseconds and moves on automatically.\n\nwait(1000);  // Waits for 1 second\nwait(500);   // Waits for 0.5 seconds\nwait(3000);  // Waits for 3 seconds\n\nGive this code a try:\n\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\n\nrun(\"Gaussian Blur...\", \"sigma=2\");\n\n// Pause for 3 seconds before the next step\nwait(3000);\n\nrun(\"Make Binary\");\n\n\n\n\n\n\n\nNote\n\n\n\nwait() is also useful for debugging, as it allows you to see the image before the next step. This is one of my favourite debugging tools."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#using-loops-and-conditional-statements",
    "href": "FIJI-macro-tutorial.html#using-loops-and-conditional-statements",
    "title": "Writing Your First ImageJ Macro",
    "section": "🌀 Using Loops and Conditional Statements",
    "text": "🌀 Using Loops and Conditional Statements\nIn macro writing, loops and conditions are essential tools that let you repeat actions, check for specific conditions, and apply different steps depending on the data. These loops start with for, and conditions start with if or else.\n\n\n\n\n\n\nLoops and Conditions\n\n\n\n\n\n\n\n\n\n\n\nStructure\nWhat it Does\nExample Use Case\n\n\n\n\nfor loop\nRepeats a block of code for a list of items\nLoop through channels or image slices\n\n\nif\nChecks a condition and runs code if true\nOnly threshold if a checkbox is selected\n\n\nelse\nRuns alternative code if the if fails\nDo a different filter if one is unchecked\n\n\nif (...) && (...)\nLogical AND — all conditions must be true\nOnly run if two options are selected\n\n\nif (...) || (...)\nLogical OR — at least one condition is true\nRun if either contrast or sharpness is checked\n\n\n\n\n\n\nFor Loops\nLoops help us repeat the same action multiple times. Let’s write a loop that prints “Hello!” three times.\n\nOpen a new macro window in FIJI\nWrite the following code:\n\n\nfor (i = 0; i &lt; 3; i++) {\n    print(\"Hello!\");\n}\n\nWhat output did you get? Hello! Should have printed 3x in the log.\n\n\n🔍 Show Explanation\n\nWhat does for (i = 0; i &lt; 3; i++) mean? This is a for loop — a way to repeat something multiple times.\n\nfor This starts the loop\ni Is a variable. It acts like a counter that keeps track of which loop number you’re on. i is short for index or iterator — it’s just a tradition in programming. It is common to use i, j, k, etc. as loop variables, but you could choose any name. e.g. counter, index, etc: for (counter = 0; counter &lt; 3; counter++)\ni = 0 Start by setting i to 0 — this is the first count\ni &lt; 3 Keep repeating as long as it is less than 3\ni++ After each loop, add 1 to i (same as i = i + 1)\nThink of i as what number am I on right now?\n\n\n\n\nLoop\nValue of i\nWhat gets printed\n\n\n\n\n1st loop\n0\n0\n\n\n2nd loop\n1\n1\n\n\n3rd loop\n2\n2\n\n\n\nAfter that, i becomes 3, and the loop stops — because the condition i &lt; 3 is no longer true.\n\n\n\n\n\n\n\nChallenge: What Does i Do?\n\n\n\nLet’s explore what the variable i does in a loop.\nTry running this macro:\nfor (i = 0; i &lt; 5; i++) {\n    print(\"Loop number: \" + i);\n}\nBefore you run it, can you guess what it will print?\n\n\n🔍 Show Solution\n\nThis loop runs 5 times. The value of i changes with each loop:\nLoop number: 0\nLoop number: 1\nLoop number: 2\nLoop number: 3\nLoop number: 4\n\nLet’s try another example:\nfor (i = 1; i &lt;= 4; i++) {\n    print(\"Saving image as: Image_\" + i + \".tif\");\n}\nWhat do you think this will print?\n\n\n🔍 Show Solution\n\nThis loop runs 4 times. The value of i changes with each loop:\nSaving image as: Image_1.tif\nSaving image as: Image_2.tif\nSaving image as: Image_3.tif\nSaving image as: Image_4.tif\n\nHow could you alter the loop to save images as Image_1.tif, Image_2.tif, Image_3.tif, and Image_4.tif to a directory?\n\n\n🔍 Show Solution\n\nfor (i = 1; i &lt;= 4; i++) {\n    saveAs(\"Tiff\", dir + \"Image_\" + i + \".tif\");\n    print(\"Saving image as: Image_\" + i + \".tif\");\n}\nThis code will return an error if the directory is not defined. But this is how you could apply this concept in working macros.\n\nNow let’s use a loop to access items from an array. Imagine you have an array of stains used in your experiment:\nstains = newArray(\"DAPI\", \"BRN3A\", \"ISLET1\");\nWrite a loop that prints each stain name. Fill in the blanks.\nstains = newArray(\"BRN3A\", \"ISLET1\", \"DAPI\");\n\nfor (i = 0; i &lt; ________; i++) {\n    print(\"Processing stain: \" + _______);\n}\n\n\n🔍 Show Solution\n\nstains = newArray(\"BRN3A\", \"ISLET1\", \"DAPI\");\n\nfor (i = 0; i &lt; stains.length; i++) {\n    print(\"Processing stain: \" + stains[i]);\n}\nProcessing stain: BRN3A\nProcessing stain: ISLET1\nProcessing stain: DAPI\nBreakdown:\n\ni = 0 starts at the first item in the array. stains[0] is “BRN3A”\ni &lt; stains.length keeps going as long as i is less than the total number of items in the array (3 in this case).\nstains.length is the number of items (in this case: 3). By adding .length to a variable, you can find out how many items are in that variable. .length is a property of an array in ImageJ macros (and many programming languages).\ni++ increases i by 1 after each loop iteration (moves to the next stain).\n\n\n\n\n\n\n\n\n\n\nChallenge: Apply Filters to Multiple Channels\n\n\n\nYou’ve split a multi-channel image and want to process only selected channels, like C1 and C3.\nUse a loop to:\n\nSplit the channels using Split Channels\n\nLoop through two channels e.g. (C1 and C3)\n\nApply a Median filter and Make Binary to each\n\nFill in the blanks below:\ntitle = ___________;  // Get the image title\nrun(\"____________\");  // Split channels into separate windows\n\n// List of channels you want to process \nchannelsToProcess = newArray(\"1\", \"3\");\n\nfor (i = 0; i &lt; ___________; i++) {\n    channel = ____________;\n    // Construct the window name based on how ImageJ names split channels\n    fullTitle = \"C\" + channel + \"-\" + _______;\n    \n    selectWindow(fullTitle);\n    \n    run(\"Median...\", \"radius=2\");\n    setOption(\"BlackBackground\", true);\n    run(\"Convert to Mask\");\n}\n\n\n🔍 Show Solution\n\n// Get the original image title (e.g., \"sample.tif\")\ntitle = getTitle();\n\n// Split the image into channels (creates C1-&lt;title&gt;, C2-&lt;title&gt;, etc.)\nrun(\"Split Channels\");\n\n// List of channels you want to process \nchannelsToProcess = newArray(\"1\", \"3\");\n\nfor (i = 0; i &lt; channelsToProcess.length; i++) {\n    channel = channelsToProcess[i];\n    \n    // Construct the window name based on how ImageJ names split channels\n    fullTitle = \"C\" + channel + \"-\" + title;\n    \n    selectWindow(fullTitle);\n    \n    run(\"Median...\", \"radius=2\");\n    setOption(\"BlackBackground\", true);\n    run(\"Convert to Mask\");\n}\nThis code will process only the specified channels (C1 and C3) by applying a median filter and converting them to binary masks. The loop iterates through the channelsToProcess array, constructs the window name for each channel, and applies the desired processing steps.\n\n\n\n\n\nIf Else Statements\nIf statements are used to check if a condition is true or false. If the condition is true, the code inside the if statement will run. This is key for customising your workflow based on your data.\nAn if/else statement lets you run one block of code if a condition is true, and a different block if it’s false. For example:\n\nif (slices &gt; 1) {\n    run(\"Z Project...\", \"projection=[Max Intensity]\");\n    rename(title);\n} else {\n    print(\"Single slice image, no projection needed\");\n}\n\nThis code checks if the number of slices is greater than 1. If it is, it runs a max projection and renames the image. If not, it prints a message saying no projection is needed.\n\n\n\n\n\n\nChallenge: Use If Else Statements\n\n\n\nYour task is to write a macro that:\n\nGets the number of Z slices in the image.\nIf there are more than one, runs a Z projection.\nOtherwise, split channels.\n\nTest it on sample-image1.tif and sample-image3.tif\n// Get image dimensions, where 'slices' is the number of Z slices\nStack.getDimensions(width, height, channels, slices, frames);\n\n// Replace the placeholder condition and commands as needed\nif (__________) {\n    run(\"Z Project...\", \"projection=[Max Intensity]\");\n    print(\"Applied Z Projection\");\n} else {\n    run(\"_________\");\n    print(\"Split channels\");\n}\n🧠 Hint: Replace the blank with a condition that checks if slices is greater than 1.\n\n\n🔍 Show Solution\n\nStack.getDimensions(width, height, channels, slices, frames);\n\nif (slices &gt; 1) {\n    run(\"Z Project...\", \"projection=[Max Intensity]\");\n    print(\"Applied Z Projection\");\n} else {\n    run(\"Split Channels\");\n    print(\"Split channels\");\n}\nThis code checks the number of slices in the image. If there are more than one slice, it applies a Z projection. If not, it splits the channels.\n\n\n\nLet’s try and integrate some concepts we explored earlier:\n\n\n\n\n\n\nChallenge: Apply a Filter Based on User Input\n\n\n\nLet’s give the user a choice! Open sample-image1.tif. Use a dialog box to let the user enter a number between 1 and 10.\n\nIf the number is 5 or greater, apply a Unsharp Mask\n\nIf it’s less than 5, apply a Split Channels\n\nFill in the blanks:\nDialog.create(\"Choose a filter\");\nDialog.________(\"Enter a number (1–10)\", 5);\nDialog.show();\n\nvalue = Dialog.getNumber();\n\nif (__________________) {\n    run(\"Unsharp Mask...\", \"radius=1 mask=0.60\");\n    print(\"Applied Unsharp Mask\");\n} ______ {\n    run(\"Split Channels\");\n    print(\"Applied Split Channels\");\n}\n🧠 This is a great way to customize processing based on user-defined settings. To write is something is greater than or equal to something else, use &gt;=. To write is something is less than or equal to something else, use &lt;=.\n\n\n🔍 Show Solution\n\nDialog.create(\"Choose a filter\");\nDialog.addNumber(\"Enter a number (1–10)\", 5);\nDialog.show();\n\nvalue = Dialog.getNumber();\n\nif (value &gt;= 5) {\n    run(\"Unsharp Mask...\", \"radius=1 mask=0.60\");\n    print(\"Applied Unsharp Mask\");\n} else {\n    run(\"Split Channels\");\n    print(\"Applied Split Channels\");\n}\nThis code creates a dialog box that prompts the user to enter a number between 1 and 10. If the number is 5 or greater (&gt;=), it applies Unsharp Mask. If the number is less than 5, it applies split channels.\n\nLet’s try another one. Let the user choose between two image filters using a dropdown menu by creating a dialog box.\n\nIf the user selects “Gaussian”, apply a Gaussian Blur\nIf the user selects “Median”, apply a Median Filter\n\nComplete the macro below:\nDialog.create(\"Choose a filter type\");\nDialog.________(\"Select filter\", __________(\"Gaussian\", \"Median\"), \"Gaussian\");\nDialog._____();\n\nchoice = Dialog.getChoice();\n\nif (________________________) {\n    run(\"Gaussian Blur...\", \"sigma=2\");\n    print(\"Applied Gaussian Blur\");\n} else {\n    run(\"Median...\", \"radius=2\");\n    print(\"Applied Median Filter\");\n}\n🧠 Use == to compare the selected value with a string like “Gaussian”.\n\n\n🔍 Show Solution\n\nDialog.create(\"Choose a filter type\");\nDialog.addChoice(\"Select filter\", newArray(\"Gaussian\", \"Median\"), \"Gaussian\");\nDialog.show();\n\nchoice = Dialog.getChoice();\n\nif (choice == \"Gaussian\") {\n    run(\"Gaussian Blur...\", \"sigma=2\");\n    print(\"Applied Gaussian Blur\");\n} else {\n    run(\"Median...\", \"radius=2\");\n    print(\"Applied Median Filter\");\n}\nThis code creates a dialog box that lets the user choose between “Gaussian” and “Median” filters. If the user selects “Gaussian”, it applies a Gaussian Blur. If the user selects “Median”, it applies a Median Filter.\n\nWhat if you don’t want to apply a filter? We need a none option. To do this we can use an else if statement. This is a way to check multiple conditions in a row.\nUpdate your macro so the user can choose from three options:\n\n“Gaussian” → apply a Gaussian Blur\n\n“Median” → apply a Median Filter\n\n“None” → apply no filter, just print a message\n\nUse else if to handle the third case.\nDialog.create(\"Choose a filter type\");\nDialog.addChoice(\"Select filter\", _______________________________________, \"Gaussian\");\nDialog.show();\n\nchoice = Dialog.getChoice();\n\nif (choice == \"Gaussian\") {\n    run(________________, \"sigma=2\");\n    print(\"Applied Gaussian Blur\");\n} else if (choice == \"__________\") {\n    run(\"______________\", \"radius=2\");\n    print(\"Applied Median Filter\");\n} else {\n    print(\"No filter applied.\");\n}\n\n\n🔍 Show Solution\n\nDialog.create(\"Choose a filter type\");\nDialog.addChoice(\"Select filter\", newArray(\"Gaussian\", \"Median\", \"None\"), \"Gaussian\");\nDialog.show();\n\nchoice = Dialog.getChoice();\n\nif (choice == \"Gaussian\") {\n    run(\"Gaussian Blur...\", \"sigma=2\");\n    print(\"Applied Gaussian Blur\");\n} else if (choice == \"Median\") {\n    run(\"Median...\", \"radius=2\");\n    print(\"Applied Median Filter\");\n} else {\n    print(\"No filter applied.\");\n}\nThis code creates a dialog box that lets the user choose between “Gaussian”, “Median”, and “None” filters. If the user selects “Gaussian”, it applies a Gaussian Blur. If the user selects “Median”, it applies a Median Filter. If the user selects “None”, it prints a message saying no filter was applied.\n\n\n\nThe power of loops and conditions is that they allow you to create flexible and dynamic macros. You can adapt your code to different situations, making it more efficient and user-friendly. By combining both loops and conditions, you can create complex workflows that can handle a variety of tasks.\nLet’s say you have 3 channels (e.g., C1, C2, C3) and you want to choose which filter to apply to each channel. Using sample-image3.tif.\n\nSplit image into separate channel windows (C1-…, C2-…, etc.)\nAsk the user to select a filter type using Dialog.addChoice()\nCreate a list of channel numbers in an array (e.g., “1”, “2”, “3”)\nUse a for loop to loop through each channel\nUse if, else if, and else inside the loop to apply the chosen filter to each channel\n\n\n\n\n\n\n\nChallenge: Apply a Chosen Filter to All Channels\n\n\n\nYour task is to:\n\nAsk the user which filter to apply: \"Gaussian\", \"Median\", or \"None\"\nLoop through channels 1 to 3\nApply the selected filter to each channel window\n\nFill in the blanks below:\n// Ask the user which filter to apply\nDialog.______(\"Filter Selection\");\nDialog.______(\"Choose filter\", newArray(\"Gaussian\", \"Median\", \"None\"), \"Gaussian\");\nDialog.___();\n\nchoice = Dialog.________();\n\n// List of channels\nchannels = newArray(\"1\", \"2\", \"3\");\ntitle = getTitle(); // Base title of the original image\nrun(\"Split Channels\"); // Split channels into separate windows\n\n// Loop through channels\nfor (i = _; i &lt; channels._____; i++) {\n    channel = channels[i];\n    fullTitle = \"C\" + channel + \"-\" + title;\n    selectWindow(fullTitle);\n\n    ___ (choice == \"Gaussian\") {\n        run(\"Gaussian Blur...\", \"sigma=2\");\n        print(\"Applied Gaussian to C\" + channel);\n    } ______ ______ (choice == \"Median\") {\n        run(\"Median...\", \"radius=2\");\n        print(\"Applied Median to C\" + channel);\n    } else {\n        print(\"No filter applied to C\" + channel);\n    }\n}\n\n\n🔍 Show Solution\n\n// Ask the user which filter to apply\nDialog.create(\"Filter Selection\");\nDialog.addChoice(\"Choose filter\", newArray(\"Gaussian\", \"Median\", \"None\"), \"Gaussian\");\nDialog.show();\n\nchoice = Dialog.getChoice();\n\n// List of channels\nchannels = newArray(\"1\", \"2\", \"3\");\ntitle = getTitle(); // Base title of the original image\nrun(\"Split Channels\"); // Split channels into separate windows\n\n// Loop through channels\nfor (i = 0; i &lt; channels.length; i++) {\n    channel = channels[i];\n    fullTitle = \"C\" + channel + \"-\" + title;\n    selectWindow(fullTitle);\n\n    if (choice == \"Gaussian\") {\n        run(\"Gaussian Blur...\", \"sigma=2\");\n        print(\"Applied Gaussian to C\" + channel);\n    } else if (choice == \"Median\") {\n        run(\"Median...\", \"radius=2\");\n        print(\"Applied Median to C\" + channel);\n    } else {\n        print(\"No filter applied to C\" + channel);\n    }\n} // close bracket for for loop\nDialog.addChoice(...): lets the user select a filter option\nchoice = Dialog.getChoice(): stores that selection\nchannels = newArray(...): defines which channels to loop through\nfor (...): goes through each channel one at a time\nselectWindow(...): activates each channel image window\nif/else: chooses what filter (if any) to apply\nGive it a go trying different options.\n\n\n\nOk, but what if I want to apply different filters to different channels? Now we are entering the realm of channel-specific processing logic — where the user can apply different filters to different channels in a single macro. This is a fantastic way to combine:\n✅ A for loop\n✅ An if/else if decision tree\n✅ A dialog-driven, per-channel configuration\nLet’s say the user wants:\n🟢 C1 → Apply Median filter\n🔵 C2 → Apply Unsharp Mask\n⚫ C3 → Apply Make Binary\nWe’ll create:\n\nA dialog with three dropdowns, one per channel\nA for loop to go through each channel\nA separate filter choice for each channel using if / else if / else inside the loop\n\n\n\n\n\n\n\nChallenge: Apply Different Filters Per Channel\n\n\n\nLet the user choose a specific filter for each channel using dropdown menus, then loop through each channel and apply the correct filter.\n// === Create dialog with a dropdown for each channel ===\nDialog.create(\"Select Filter for Each Channel\");\n\nDialog.addChoice(\"C1 Filter\", newArray(\"Median\", \"Unsharp\", \"Binary\", \"None\"), \"Median\");\nDialog.addChoice(\"C2 Filter\", newArray(\"Median\", \"Unsharp\", \"Binary\", \"None\"), \"Unsharp\");\nDialog.addChoice(\"C3 Filter\", newArray(\"Median\", \"Unsharp\", \"Binary\", \"None\"), \"Binary\");\n\nDialog.show();\n\n// === Store choices for each channel ===\nc1_filter = Dialog.__________;\nc2_filter = Dialog.__________;\nc3_filter = Dialog.__________;\n\n// === Array of filters in the same order as channels ===\nfilters = newArray(________, _________, _________);\nchannels = newArray(\"1\", \"2\", \"3\");\ntitle = _________; // base image name\nrun(\"Split Channels\"); // Split channels into separate windows\n\n// === Loop through channels ===\nfor (_____;_________________;_______) {\n    channel = channels[i];\n    filter = filters[i];\n    fullTitle = \"C\" + channel + \"-\" + title;\n\n    selectWindow(fullTitle);\n\n    if (filter ____ \"Median\") {\n        run(\"Median...\", \"radius=2\");\n        print(\"Applied Median to C\" + channel);\n    } else if (filter ____ \"Unsharp\") {\n        run(\"Unsharp Mask...\", \"radius=1 mask=0.6\");\n        print(\"Applied Unsharp Mask to C\" + channel);\n    } else if (filter ____\"Binary\") {\n        run(\"Make Binary\");\n        print(\"Applied Binary to C\" + channel);\n    } else {\n        print(\"No filter applied to C\" + channel);\n    }\n}\n\n\n🔍 Solution\n\nLet the user choose a specific filter for each channel using dropdown menus, then loop through each channel and apply the correct filter.\n// === Create dialog with a dropdown for each channel ===\nDialog.create(\"Select Filter for Each Channel\");\n\nDialog.addChoice(\"C1 Filter\", newArray(\"Median\", \"Unsharp\", \"Binary\", \"None\"), \"Median\");\nDialog.addChoice(\"C2 Filter\", newArray(\"Median\", \"Unsharp\", \"Binary\", \"None\"), \"Unsharp\");\nDialog.addChoice(\"C3 Filter\", newArray(\"Median\", \"Unsharp\", \"Binary\", \"None\"), \"Binary\");\n\nDialog.show();\n\n// === Store choices for each channel ===\nc1_filter = Dialog.getChoice();\nc2_filter = Dialog.getChoice();\nc3_filter = Dialog.getChoice();\n\n// === Array of filters in the same order as channels ===\nfilters = newArray(c1_filter, c2_filter, c3_filter);\nchannels = newArray(\"1\", \"2\", \"3\");\ntitle = getTitle(); // base image name\nrun(\"Split Channels\"); // Split channels into separate windows\n\n// === Loop through channels ===\nfor (i = 0; i &lt; channels.length; i++) {\n    channel = channels[i];\n    filter = filters[i];\n    fullTitle = \"C\" + channel + \"-\" + title;\n\n    selectWindow(fullTitle);\n\n    if (filter == \"Median\") {\n        run(\"Median...\", \"radius=2\");\n        print(\"Applied Median to C\" + channel);\n    } else if (filter == \"Unsharp\") {\n        run(\"Unsharp Mask...\", \"radius=1 mask=0.6\");\n        print(\"Applied Unsharp Mask to C\" + channel);\n    } else if (filter == \"Binary\") {\n        run(\"Make Binary\");\n        print(\"Applied Binary to C\" + channel);\n    } else {\n        print(\"No filter applied to C\" + channel);\n    }\n}\n3 dropdowns → user chooses a filter for each channel\nThe choices are saved into c1_filter, c2_filter, c3_filter\nThese are combined into an array: filters = newArray(…)\nWe then loop over the channels (C1, C2, C3) and apply the filter from filters[i]\nif / else if / else applies the correct filter, or skips it\n💡 Super flexible — you can later add more filters, more channels, or apply this to batch processing!\n\n\n\n\n\nFormatting Loops and Conditions\nWhen writing loops and conditions, it is important to format them correctly. Here are some tips:\n\nAlways check your condition: Ensure your comparison (like slices &gt; 1) makes sense for your data.\nUse proper indentation: It makes your code easier to read. Notice how the code inside the loop or condition is indented. This shows that it belongs to that loop or condition.\nTest both paths: Make sure your macro works when the condition is both true and false.\nUse comments: Add comments to explain what each part of your code does. This is especially helpful for complex loops and conditions."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#working-with-the-results-table",
    "href": "FIJI-macro-tutorial.html#working-with-the-results-table",
    "title": "Writing Your First ImageJ Macro",
    "section": "📊 Working with the Results Table",
    "text": "📊 Working with the Results Table\nThe results table is a powerful tool in FIJI that allows you to store and analyze data from your images. You can use it to save measurements, counts, and other information about your images.\nThe Results Table is where ImageJ stores data from tools like:\n\nrun(“Measure”)\nAnalyze Particles\nROI Manager measurements\nIntensity profiles and other analysis outputs\n\nYou can use macros to:\n\nRead and extract results\nModify values\nSave tables to file\nLoop through rows to perform calculations\n\n\n\n\n\n\n\nUseful Results Table Functions\n\n\n\n\n\n\n\n\n\n\nFunction\nPurpose\n\n\n\n\nnResults\nReturns number of rows in the Results Table\n\n\ngetResult(column, row)\nGets the value from a specific cell\n\n\nsetResult(column, row, x)\nChanges a value in the table\n\n\nresetResults()  Clears the entire table\n\n\n\nsaveAs(\"Results\", path)\nSaves results to a CSV file\n\n\nupdateResults()\nRefreshes the table to show changes\n\n\n\n\n\nFor example:\n\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\nrun(\"Make Binary\");\nrun(\"Analyze Particles...\", \"size=0-Infinity show=Overlay display clear summarize\");\n\n// Loop through Results Table\nfor (i = 0; i &lt; nResults; i++) {\n    area = getResult(\"Area\", i);\n    print(\"Object \" + (i+1) + \" area: \" + area);\n}\n\nThis macro opens the Blobs (25K) image, converts it to 8-bit, and analyzes particles. It then loops through the results table and prints the area of each object.\nnResults is a built-in variable that contains the number of rows in the results table. You can use it to loop through all the rows and extract data.\ngetResult(\"Area\", i) gets the area of the object in row i of the results table. You can replace “Area” with other column names to get different measurements.\nYou can also use the setResult() function to modify values in the results table. Add this code below the above code and check what area the first row is in the results table. It should read 999. updateResults() updates the results table to reflect the changes.\n\nsetResult(\"Area\", 0, 999);  // Change row 0's \"Area\" value to 999\nupdateResults();\n\n\n\n\n\n\n\nChallenge: Add a New Column to the Results Table\n\n\n\nAfter analyzing particles, calculate a new column called \"Half Area\" → it should be half of the \"Area\" column values.\nComplete the loop:\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\nrun(\"Make Binary\");\nrun(\"Analyze Particles...\", \"size=0-Infinity show=Overlay display clear summarize\");\n\nfor (i = 0; i &lt; _______; i++) {\n    area = getResult(\"________\", i);\n    setResult(\"Half Area\", i, area / 2);\n}\n\n__________;  // Refresh the table to show the new column\n\n\n🔍 Show Solution\n\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\nrun(\"Make Binary\");\nrun(\"Analyze Particles...\", \"size=0-Infinity show=Overlay display clear summarize\");\n\nfor (i = 0; i &lt; nResults; i++) {\n    area = getResult(\"Area\", i);\n    setResult(\"Half Area\", i, area / 2);\n}\n\nupdateResults();\nsetResult(column, row, value) lets you add or update a value in the Results Table:\n\ncolumn: the name of the column (e.g., “Area”, “Mean”, or your own, like “Half Area”)\nrow: which row to write into (starting from 0)\nvalue: the number or text to insert\n\n\n\n\n\n📐 Controlling Output with setMeasurements()\nBy default, ImageJ might not show all the measurements you want (like Mean, Area, Min, Max, Integrated Density etc.). The setMeasurements() function lets you control what measurements are saved in the Results Table. You can see what measurements are available by going to Analyze &gt; Set Measurements... in the FIJI menu.\nWith setMeasurements(), you can:\n\nSelect only the measurements you care about\nControl which columns appear in the Results Table\nAvoid clutter and make the table easier to work with\nEnsure consistency when using getResult() later in your macro\n\nOpen up the macro recorder by going to Plugins &gt; Macros &gt; Record... and run Analyze &gt; Set Measurements.... This will show you the options available. You can select or deselect the measurements you want to include in the Results Table.\ne.g. \n\nrun(\"Set Measurements...\", \"area mean standard modal min centroid center perimeter bounding fit shape feret's integrated median skewness kurtosis area_fraction stack redirect=None decimal=6\");\n\n\nI have a setMeasurements() function in every single macro I make. This way the results table will include the same measurements each time I or someone else runs it. This makes data analysis pipeline more streamlined - especially if you are inserting data into analysis tools like R or Python.\n\n\n\n\n\n\n\nChallenge: Customize the Measurements\n\n\n\nYou want to measure only the mean intensity and perimeter of the image. Use setMeasurements() to control what gets added to the Results Table.\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\nrun(\"Make Binary\");\n\nrun(\"Set Measurements...\", \"_______________________\");\nrun(\"Measure\");\n\n\n🔍 Show Solution\n\nrun(\"Blobs (25K)\");\nrun(\"8-bit\");\nrun(\"Make Binary\");\n\nrun(\"Set Measurements...\", \"mean perimeter\");\nrun(\"Measure\");"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#bonus-merging-channels",
    "href": "FIJI-macro-tutorial.html#bonus-merging-channels",
    "title": "Writing Your First ImageJ Macro",
    "section": "🌈 Bonus: Merging Channels",
    "text": "🌈 Bonus: Merging Channels\nOne very common task in image analysis is to merge channels together. This can be done using the Merge Channels command in FIJI. But we will use macros to automate this process. The code for merging channels is not as intuitive as the other commands we have seen so far. It requires a specific format. This is why I have decided to include it here as a bonus section.\nWhy Merge Channels? Merging channels allows you to:\n\nCombine split grayscale images (C1, C2, C3…) into a single composite color image\nVisualize multi-stain images with colors (e.g., red for BRN3A, green for ISLET1)\nExport publication-ready RGB images\n\nAfter processing or splitting channels individually, you’ll often want to bring them back together for analysis or presentation.\nSo let’s start fresh with a new FIJI macro.\n\nOpen a new macro window in FIJI.\nOpen image sample-image1 in FIJI. This image of neurons has 4 channels. DAPI (nucleus), cell membrane stain, mitochondria stain and transmitted light. We should merge the Nucleus, cell membrane and mitochondria stain into one image.\nOpen up the macro recorder by going to\n\n\n🔎 Plugins &gt; Macros &gt; Record...\n\n\nThen run split channels\n\n\n🔎 Image &gt; Color &gt; Split Channels\n\n\nNow run the merge channels command\n\n\n🔎 Image &gt; Color &gt; Merge Channels...\n\n\nIn the merge channels dialog, select the channels you want to merge.\n\n\nSelect the first channel (e.g., C1) and choose a color (e.g., Blue)\nSelect the second channel (e.g., C2) and choose a color (e.g., Yellow)\nSelect the third channel (e.g., C3) and choose a color (e.g., Red)\nLeave the fourth channel (e.g., C4) unselected as we want to leave out the transmitted light channel\n\n\n🔎 Image &gt; Color &gt; Merge Channels...\n\n\nThis will give:\n\nrun(\"Merge Channels...\", \"c1=C3-sample-image1.tif c3=C1-sample-image1.tif c7=C2-sample-image1.tif create\");\n\nWhat is happening here?\n\nc1=…, c2=…, c3=… … represent channel slots in the merge (Red = c1, Green = c2, Blue = c3, and so on). In reality, it doesn’t matter what color you choose, as long as you know which channel is which.\nThe filenames assigned to each slot (e.g., “C3-sample-image1.tif”) are the actual grayscale image windows open.\ncreate means “create a new composite image from these inputs.”\n\nHowever, we want to keep our code generic, so that when we have another image this code will still work. We can use the getTitle() function to get the name of the image. This way, we can use the same macro for any image.\n\ntitle = getTitle(); // Get the title of the current image\nrun(\"Split Channels\");\nrun(\"Merge Channels...\", \"c1=[C1-\" + title + \"] c2=[C2-\" + title + \"] c3=[C3-\" + title + \"] create\");\n\nTake note of the capital letters and spaces. This is important in this case. Compare the recorder window output to this output.\n\nOpen sample-image3.tif and re-run the above code. You should see another image window open with the merged channels without the ransmitted light channel."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#exiting-the-macro",
    "href": "FIJI-macro-tutorial.html#exiting-the-macro",
    "title": "Writing Your First ImageJ Macro",
    "section": "🏁 Exiting the Macro",
    "text": "🏁 Exiting the Macro\nThere are a number of ways to let a user know when the macro has completed.\n\nDisplay a pop-up window:\n\n\nshowMessage(\"Macro Complete\", \"All processing steps are done.\");\n\n\nPrint a message in the FIJI log window:\n\n\nprint(\"Macro finished successfully.\");\n\n\nMake a sound:\n\n\nbeep();\n\n\nExit message:\n\n\nexit(\"Done\");\n\nTry each one and see what you like best. You can also combine them."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#batch-processing-folders-of-images",
    "href": "FIJI-macro-tutorial.html#batch-processing-folders-of-images",
    "title": "Writing Your First ImageJ Macro",
    "section": "📂 Batch Processing Folders of Images",
    "text": "📂 Batch Processing Folders of Images\nNow this macro only speeds up processing of individual images. Often we have tens to thousands of images to process. Even with this macro, opening each image individually and running the macro is time consuming. Instead, we can batch process folders of images using the same macro.\nIn batch processing you supply FIJI a set of files and a set of instructions, and it performs the same instructions on each file in the set and saves the results in a location of your choice.\nUses curly brackets {} (to denote a batch)\nUsing the existing macro, we can add a batch processing loop to the macro. This will allow us to process all images in a folder.\n\nAdd the following to the macro above the line run(\"Z Project...\", \"projection=[Max Intensity]\");\n\n\n// ===== Setup Directories =====\n// Choose source directory and create subdirectories for CSV results and ROI images.\ndir = getDirectory(\"Choose Source Directory of images\");\nresultsDir = dir+\"CSV_results/\";\nFile.makeDirectory(resultsDir);\n\n// Process all .tif files in the source directory.\nprocessFolder(dir);\nfunction processFolder(dir) {\n    list = getFileList(dir);\n    list = Array.sort(list);\n    for (i = 0; i &lt; list.length; i++) {\n        if (endsWith(list[i], \".tif\")) {\n            processFile(dir, resultsDir, list[i]);\n        }\n    }\n} \n\ndir is the source directory where the images are located. resultsDir is the directory where the results will be saved. The function File.makeDirectory(resultsDir) will make a new folder called CSV_results inside the dir filepath.\nThe processFolder() function processes all .tif files in the source directory. Here we a defining a function using curly braces { }. The processFile() function processes each file in the source directory. The for loop iterates through all files in the directory, and if the file ends with .tif, it calls the processFile() function to process that file.\nlist = getFileList(dir); gets a list of all files in the directory dir and stores it in the variable list.\nlist = Array.sort(list); This sorts the filenames alphabetically so that files are processed in a predictable order.\nfor (i = 0; i &lt; list.length; i++) This is a loop that goes through each file in the list. The variable i is the index of the current file.\n\ni = 0: Start at the first item in the list (position 0).\ni &lt; list.length: Keep going as long as i is less than the total number of items in the list (number of images).\ni++: Increase i by 1 after each loop iteration (move to the next image).\n\n\n\n🔍 Show Explanation\n\nSo, if your folder contains 5 files, this loop will run 5 times, and each time:\nlist[i]…\nlist[0] → first file\nlist[1] → second file\n…\nlist[4] → fifth file\n\nif (endsWith(list[i], \".tif\")) { ... } This checks if the current file (list[i]) ends with “.tif”. If it does, the code inside the curly braces { } will run. This is a way to filter out files that are not images.\nprocessFile(dir, resultsDir, list[i]); This calls the processFile() function to process the current file. The parameters passed to the function are:\n\ndir: The source directory where the images are located.\nresultsDir: The directory where the results will be saved.\nlist[i]: The name of the current file being processed.\n\nprocessFile() is another function we will define later. It will contain the code that processes each image to your liking.\ne.g. If your folder contains:\n[“image1.tif”, “readme.txt”, “image2.tif”]\nThis loop will:\n✅ Process image1.tif\n❌ Skip readme.txt\n✅ Process image2.tif\n\nNow lets delete the original line of code that allows the user to save the results to a certain file.\n\n\ndir = getDirectory(\"Choose Destination Directory\"); // remove this line\n\nYou should have something like this:\n\n\n\n\n\n\nNow we need to define the processFile() function. This function will contain the code that processes each image. We can copy and paste the code from the original macro into this function. Just below our processFolder function, add:\n\n\n// ===== Process Each Image =====\nfunction processFile(dir, resultsDir, file){\n    // Open the image and get its title.\n    open(dir + File.separator + file);\n    title = getTitle();\n\nThis section of your macro defines a custom function called processFile(). This function is used to process one image at a time — and it gets called inside the loop that handles all .tif files that we defined above. The function takes three parameters:\n\ndir: The source directory where the images are located.\nresultsDir: The directory where the results will be saved.\nfile: The name of the current file being processed.\n\nopen(dir + File.separator + file); opens the image file. It builds the full file path using:\ndir: folder path (e.g., “C:/Images/”)\nFile.separator: the slash (/ or , depending on operating system)\nfile: the image filename (e.g., “sample-image1.tif”)\n\n\n🔍 Show Explanation\n\nSo if dir = “C:/Images” and file = “image1.tif”, this line becomes:\nopen(\"C:/Images/image1.tif\");\nThis opens the image file in FIJI.\n\ntitle = getTitle(); After the image opens, this line stores the image’s title (window name) in a variable called title. This title will be used later in the macro for naming saved files or identifying what’s currently being processed.\n\nNotice we have now defined title twice. Once inside our processFile() function and once at the start of the macro. We can remove the first instance of title = getTitle(); from the macro, as it is now defined inside the processFile() function.\nNow our previous code is nestled inside the processFile() function. We need to add a closing curly brace } at the end of the macro to close the function. After the line saveAs(\"Results\", dir + \"Summary_\" + title + \".csv\"); add the closing curly brace }.\nAh but wait! We need to change the saveAs() lines to use the new resultsDir variable we created earlier. This will save the results in the CSV_results folder we created at the start of the macro rather than where the images are stored. This keeps everything organised.\n\n\nselectWindow(\"Results\");\nsaveAs(\"Results\", resultsDir + \"Results_\" + title + \".csv\");\nselectWindow(\"Summary\");\nsaveAs(\"Results\", resultsDir + \"Summary_\" + title + \".csv\");\n\n\nNow lets add some cleaning up code to close the image and clear the results before looping to the next image. This will help keep FIJI running smoothly and free up memory. At the end of the processFile() function, add:\n\n\nif (isOpen(\"Results\")) close(\"Results\");\nif (isOpen(\"Summary\")) close(\"Summary\");\nroiManager(\"Deselect\"); // Ensure no ROIs are selected\nclose(\"*\"); // Close all open images\n\n// Sometimes windows need encouraging to close. So we can specfy them by name:\nclose(\"Results_\" + title + \".csv\");\nclose(\"Summary_\" + title + \".csv\");\nclose(\"ROI Manager\");\n\n\nThen outside of the closing curly brace } of the processFile() function, we can add an exit message:\n\n\nexit(\"Done\");\n\n\nSave the sample-image1.tif and sample-image2.tif to a folder. Then run the macro on the folder of images. Check the output files. You should see a new folder called CSV_results in the same directory as your images. Inside this folder should be the results and summary files for each image.\n\n\n\n🔍 Show the full code\n\n// USAGE: Use in FIJI\n//\n// Author: Marnie L Maddock (University of Wollongong)\n// mmaddock@uow.edu.au, mlm715@uowmail.edu.au\n// 5.07.2024\n// Count number of Objects in a Channel\n\n/*\nThis macro will take an image and:\n1. Run a max projection,\n2. Split the channels,\n3. Unsharp mask, \n4. Convert to binary,\n5. Analyze particles (count objects),\n6. Save the results and summary files.\n*/\n\n// Instructions\n// Have a folder of tif images\n// Press run on macro\n// Select folder with tif images\n// Specify which channel the objects you want to count\n// Macro will automatically run. A pop-up box will appear once the macro has completed.\n\n// ===== Setup Directories =====\n// Choose source directory and create subdirectories for CSV results and ROI images.\ndir = getDirectory(\"Choose Source Directory of images\");\nresultsDir = dir+\"CSV_results/\";\nFile.makeDirectory(resultsDir);\n\n\n// create a pop-up box that allows user to specify what channel to count objects in\nDialog.create(\"Specify Channel Number to Count Objects\");\nDialog.addNumber(\"Channel number for analyze particles\", 1); // Instructions, with 1 being default\nDialog.show; // Display dialog box\n\n// save number entered by user to channel_num\nchannel_num = Dialog.getNumber();\n\n// Process all .tif files in the source directory.\nprocessFolder(dir);\nfunction processFolder(dir) {\n    list = getFileList(dir);\n    list = Array.sort(list);\n    for (i = 0; i &lt; list.length; i++) {\n        if (endsWith(list[i], \".tif\")) {\n            processFile(dir, resultsDir, list[i]);\n        }\n    }\n} \n\n// ===== Process Each Image =====\nfunction processFile(dir, resultsDir, file){\n    // Open the image and get its title.\n    open(dir + File.separator + file);\n    title = getTitle();\n    \n    // Make max projection of z stack\n    run(\"Z Project...\", \"projection=[Max Intensity]\");\n    //Split the channels\n    run(\"Split Channels\");\n    //Select the image window to be counted (as specified by channel_num\n    selectImage(\"C\" + channel_num + \"-MAX_\" + title);\n    // Sharpen image using unsharp mask\n    run(\"Unsharp Mask...\", \"radius=1 mask=0.60\");\n    // Make image binary\n    setOption(\"BlackBackground\", true);\n    run(\"Convert to Mask\");\n    // Count objects\n    run(\"Analyze Particles...\", \"  show=Overlay display exclude clear summarize add\");\n    \n    // ===== Save Results =====\n    selectWindow(\"Results\");\n    saveAs(\"Results\", resultsDir + \"Results_\" + title + \".csv\");\n    selectWindow(\"Summary\");\n    saveAs(\"Results\", resultsDir + \"Summary_\" + title + \".csv\");\n    \n    if (isOpen(\"Results\")) close(\"Results\");\n    if (isOpen(\"Summary\")) close(\"Summary\");\n    roiManager(\"Deselect\"); // Ensure no ROIs are selected\n    close(\"*\"); // Close all open images\n    \n    // Sometimes windows need encouraging to close. So we can specfy them by name:\n    close(\"Results_\" + title + \".csv\");\n    close(\"Summary_\" + title + \".csv\");\n    close(\"ROI Manager\");\n}\n\nexit(\"Done\");\n\nIt runs so fast! It is now processing all images in the folder and saving the results in a new folder called CSV_results. This is a great start to automating analysis."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#final-touches",
    "href": "FIJI-macro-tutorial.html#final-touches",
    "title": "Writing Your First ImageJ Macro",
    "section": "📖 Final Touches",
    "text": "📖 Final Touches\n\n📄 Add a License\nIf you are sharing your code, you may want to add a license. A license tells other people:\n\n✅ What they can and can’t do with your code\n✅ Whether they can reuse it in their own projects\n✅ How they should give you credit\n\nSome popular licenses include:\n\nMIT License – very open and permissive\nGPL (General Public License) – requires derived code to also be open\nCreative Commons (e.g. CC-BY) – common for educational material and data\n\n\n🧭 You can explore license types at choosealicense.com\n\nWe can add a license to our code by creating a file called LICENSE in the same folder as our macro. This file should contain the text of the license you choose. Otherwise, you can directly copy the lisence info to the top of the macro. For example, if you choose the MIT License, your LICENSE file or text would look like this:\n\nMIT License\nCopyright (c) 2024 Marnie L Maddock\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), \nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n📄 Sharing Your Code\nThe best way to share code is to use a version control system like Git. This allows you to keep track of changes, collaborate with others, and share your code easily.\nGitHub is a popular platform that lets you store and publish your code online.\nYou can upload your macro scripts, images, and tutorials so others can use and contribute to them.\nHere’s how to get started:\n\nCreate a free account at github.com\nClick “New repository” and give your project a name\nAdd your .ijm files, documentation, and a LICENSE file\nWrite a README.md to explain what your macro does\n(Optional) Use Git to push updates from your local computer\n\n\n🧭 Learn more at: https://docs.github.com/en/get-started\n\n💡 GitHub makes it easier for others to find your code, give feedback, and cite your work!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#troubleshooting",
    "href": "FIJI-macro-tutorial.html#troubleshooting",
    "title": "Writing Your First ImageJ Macro",
    "section": "🛠️ Troubleshooting",
    "text": "🛠️ Troubleshooting\nWriting macros is a learning process, and errors are very normal! When something goes wrong, ImageJ usually gives you an error message that helps you figure out what’s wrong.\n\nSpelling — Make sure all function names (like run, Dialog.create) and variable names are spelled correctly.\nBrackets — Check that every opening (, {, or [ has a matching closing one.\nCapitalization — Dialog.getString() is not the same as dialog.getstring() — ImageJ is case-sensitive!\nSemicolons — Most lines must end with a ;. Forgetting one is one of the most common causes of errors.\nQuotes for Strings — Strings must be wrapped in double quotes: \"Hello\" not Hello.\nLine Numbers in Errors — The error message usually tells you what line it occurred on, but it’s not always exact — check the lines just above and below too.\nStart small — If you’re stuck, comment out sections of your macro and run it in smaller chunks.\nUse print() for debugging — You can print variables to the log to see what values are being stored.\nuse wait() to slow down the macro if it is running too fast. This can help you see what is happening at each step. Is useful for debugging and for running your analysis.\nIf you don’t know where to start, or how to write a piece of code, start by using the macro recorder. The macro recorder will record your actions in FIJI and give you a starting point.\nBefore running on a full dataset, make sure the macro works on a single image.\nIf your macro is running slowly, restart FIJI or your computer to clear memory. Often macros run faster when you have less open, so if you have images building up that do not close, add lines of code that close the image before looping to the next image.\n\n\n\n\n\n\n\nNote\n\n\n\nI find my macros run much faster if I do not have Google chrome open, chrome eats up so much of your RAM…"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#a-note-about-.lif-files",
    "href": "FIJI-macro-tutorial.html#a-note-about-.lif-files",
    "title": "Writing Your First ImageJ Macro",
    "section": "📦 A note about .lif files",
    "text": "📦 A note about .lif files\nIf you have .lif files, these need to be converted to individual .tif images prior to batch processing.\nIf you are using .lif files, you can use the Lif-to-Tif macro to convert them to .tif files. This macro will open the .lif file and save each image in the file as a separate .tif file. This macro was created by Alexandre Hego: alexandre.hego@uliege.be. It works really well for .lif project files, including .lif files with tilescans. I have added this macro to my GitHub page for accessibility Lif-to-Tif."
  },
  {
    "objectID": "FIJI-macro-tutorial.html#explore-my-macro-collection",
    "href": "FIJI-macro-tutorial.html#explore-my-macro-collection",
    "title": "Writing Your First ImageJ Macro",
    "section": "🔗 Explore My Macro Collection",
    "text": "🔗 Explore My Macro Collection\nIf you are looking for inspiration, or want to see some examples of macros I have made, check out my GitHub page. These get updated regularly. Try running them yourself with the provided sample images in each repository to see how they work. Make sure to read the README file before starting! Feel free to use these macros for analysing your own images if applicable. However, please cite the work if you do so. Refer to the license file in each repository for more information.\nIf you come across any issues, or want some features added to the macros, please let me know. Requests can be made through GitHub by going to the repository and clicking on the issues tab. Here you can submit a request for a new feature, or report a bug.\nCurrently available macros include:\n\nLif-to-Tif\nDouble-Positive-Nuclei\nDouble-Positive-Nuclei-With-Checks\nDouble-Triple-Positive-Nuclei-With-Checks\nNeuron_Confluence\nMore to come!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#feedback",
    "href": "FIJI-macro-tutorial.html#feedback",
    "title": "Writing Your First ImageJ Macro",
    "section": "Feedback",
    "text": "Feedback\nIf you’ve found this resource useful, please consider sharing it with your colleagues, students, or lab mates. The more people who benefit from it, the better!\nI’m always looking to improve this guide. If you:\n\n🐛 Found a bug or error in the macro code\n❓ Think a topic could be explained better\n📚 Have a suggestion for a new section or feature\n💡 Created your own macro and want to contribute it\n\n…I would love to hear from you!\nYou can submit feedback or suggest changes by opening an issue on GitHub.\n\n🛠️ Don’t worry if you’re not a GitHub pro — even just pointing out a typo is helpful!\n\nThank you for helping make this guide better for everyone!"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#contacts",
    "href": "FIJI-macro-tutorial.html#contacts",
    "title": "Writing Your First ImageJ Macro",
    "section": "Contacts",
    "text": "Contacts\nIf you have any questions, comments, or suggestions, please feel free to reach out to me:\n\n📧 Email\n💻 GitHub\n🐦 Twitter\n🌐 ORCID\n\nThe FIJI-macro-tutorial is housed here\nThe repository for this project is available here"
  },
  {
    "objectID": "FIJI-macro-tutorial.html#license",
    "href": "FIJI-macro-tutorial.html#license",
    "title": "Writing Your First ImageJ Macro",
    "section": "LICENSE",
    "text": "LICENSE\n\nFIJI-macro-tutorial by Marnie Maddock is licensed under CC BY 4.0"
  }
]